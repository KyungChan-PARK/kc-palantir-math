"""
Improvement Models - Data Structures for Self-Improvement System

VERSION: 4.0.0
DATE: 2025-10-14
PURPOSE: Data models for Change Impact Analysis (CIA) protocol

Based on: SELF-IMPROVEMENT-IMPLEMENTATION-PLAN-v4.0.md Section III

Data Models:
1. ImprovementAction - Proposed code changes
2. ImpactAnalysis - CIA protocol results
3. QualityGateApproval - Quality gate evaluation
4. RootCauseAnalysis - Socratic analysis results
5. IssueReport - Performance/error issue reports
6. ChangeStatus - Change tracking states
"""

from dataclasses import dataclass, field
from typing import List, Dict, Any, Optional
from datetime import datetime
from enum import Enum


# ============================================================================
# Enums
# ============================================================================

class ActionType(Enum):
    """Types of improvement actions"""
    MODIFY_PROMPT = "modify_prompt"
    ADJUST_PARAMETER = "adjust_parameter"
    CREATE_AGENT = "create_agent"
    ADD_TOOL = "add_tool"


class ChangeStatus(Enum):
    """Status of an improvement change"""
    PENDING = "pending"
    APPLIED = "applied"
    FAILED = "failed"
    ROLLED_BACK = "rolled_back"


# ============================================================================
# Core Data Models (from v4.0 plan Section III.1)
# ============================================================================

@dataclass
class ImprovementAction:
    """
    Represents a proposed code modification.

    Used by Self-Improver to specify what changes to make.
    """
    action_type: ActionType
    target_agent: str  # Agent name (e.g., "knowledge-builder")
    old_value: str  # Current state/value
    new_value: str  # Proposed new state/value
    rationale: str  # Why this change fixes the issue
    confidence_score: float  # 0.0-1.0

    def to_dict(self) -> Dict[str, Any]:
        return {
            "action_type": self.action_type.value,
            "target_agent": self.target_agent,
            "old_value": self.old_value,
            "new_value": self.new_value,
            "rationale": self.rationale,
            "confidence_score": self.confidence_score
        }


@dataclass
class ImpactAnalysis:
    """
    Result of dependency impact analysis.

    Academic spec: Candidate Impact Set (CIS) + metrics.

    Generated by DependencyAgent.perform_dependency_analysis()
    """
    sis: List[str]  # Starting Impact Set (nodes being modified)
    cis: List[str]  # Candidate Impact Set (nodes affected)
    cis_size: int  # Number of nodes in CIS
    critical_affected: bool  # Whether mission-critical components affected
    test_coverage: float = 0.0  # Test coverage of affected nodes (0.0-1.0)
    impact_report: str = ""  # Human-readable report

    def to_dict(self) -> Dict[str, Any]:
        return {
            "sis": self.sis,
            "cis": self.cis,
            "cis_size": self.cis_size,
            "critical_affected": self.critical_affected,
            "test_coverage": self.test_coverage
        }


@dataclass
class QualityGateApproval:
    """
    Quality gate evaluation result.

    Academic spec: Automated approval based on thresholds.

    Thresholds:
    - CIS size < 20 (blast radius)
    - Test coverage > 80% (safety net)
    - Critical components â†’ warning (not rejection)
    """
    passed: bool  # Whether quality gate passed
    feedback: str = ""  # Human-readable feedback
    retry_allowed: bool = True  # Whether Self-Improver can retry
    metrics: Dict[str, Any] = field(default_factory=dict)  # ImpactAnalysis metrics

    def to_dict(self) -> Dict[str, Any]:
        return {
            "passed": self.passed,
            "feedback": self.feedback,
            "retry_allowed": self.retry_allowed,
            "metrics": self.metrics
        }


@dataclass
class RootCauseAnalysis:
    """
    Result of Socratic-Mediator root cause analysis.

    Generated by multi-turn Q&A with agents to identify why an issue occurred.
    """
    issue: 'IssueReport'  # Original issue report
    identified_cause: str  # Root cause identified
    confidence_score: float  # 0.0-1.0
    recommendations: List[str]  # List of recommended fixes
    full_report: str  # Complete analysis report
    query_history: List[Dict[str, Any]] = field(default_factory=list)  # Q&A history

    def to_dict(self) -> Dict[str, Any]:
        return {
            "agent_name": self.issue.agent_name,
            "identified_cause": self.identified_cause,
            "confidence_score": self.confidence_score,
            "recommendations": self.recommendations,
            "query_count": len(self.query_history)
        }


@dataclass
class IssueReport:
    """
    Performance or error issue report.

    Triggers self-improvement cycle when system detects inefficiency.
    """
    agent_name: str  # Agent with issue
    error_type: str  # "low_success_rate", "high_latency", "errors", "quality_issues"
    metrics: Dict[str, Any]  # Performance metrics
    error_logs: List[str]  # Error messages
    context: str  # Additional context
    available_agents: List[str]  # Agents available for Q&A
    timestamp: str = field(default_factory=lambda: datetime.now().isoformat())

    def to_dict(self) -> Dict[str, Any]:
        return {
            "agent_name": self.agent_name,
            "error_type": self.error_type,
            "metrics": self.metrics,
            "error_count": len(self.error_logs),
            "timestamp": self.timestamp
        }


# ============================================================================
# Change Tracking Models
# ============================================================================

@dataclass
class ChangeRecord:
    """
    Record of a single improvement change.

    Used by ImprovementManager for history tracking and rollback.
    """
    change_id: str  # Unique identifier
    action: ImprovementAction  # The action taken
    status: ChangeStatus  # Current status
    timestamp: str  # When change was made
    files_modified: List[str] = field(default_factory=list)  # Files changed
    backup_path: Optional[str] = None  # Path to backup for rollback
    error_message: Optional[str] = None  # Error if failed

    def to_dict(self) -> Dict[str, Any]:
        return {
            "change_id": self.change_id,
            "action": self.action.to_dict(),
            "status": self.status.value,
            "timestamp": self.timestamp,
            "files_modified": self.files_modified,
            "backup_path": self.backup_path,
            "error_message": self.error_message
        }

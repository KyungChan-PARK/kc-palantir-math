{
  "schema_version": "3.0.0",
  "generated_at": "2025-10-16T00:00:00",
  "architecture_pattern": "kenneth-liao",
  "description": "Kenneth-Liao pattern: 1 main agent + 11 subagents",
  
  "main_agent": {
    "name": "meta-orchestrator",
    "role": "Central coordinator and user interface",
    "system_prompt_location": ".claude/CLAUDE.md",
    "version": "3.0.0"
  },
  
  "subagents": {
    "knowledge-builder": {
      "role": "builder",
      "responsibility": "Obsidian file creation",
      "file": "agents/knowledge_builder.py",
      "version": "3.0.0"
    },
    "quality-agent": {
      "role": "validator",
      "responsibility": "Read-only validation",
      "file": "agents/quality_agent.py",
      "version": "3.0.0"
    },
    "research-agent": {
      "role": "researcher",
      "responsibility": "Web research and data gathering",
      "file": "agents/research_agent.py",
      "version": "3.0.0"
    },
    "socratic-requirements-agent": {
      "role": "clarifier",
      "responsibility": "Ambiguity resolution via Socratic questioning",
      "file": "agents/socratic_requirements_agent.py",
      "version": "3.0.0"
    },
    "neo4j-query-agent": {
      "role": "analyzer",
      "responsibility": "Graph database operations",
      "file": "agents/neo4j_query_agent.py",
      "version": "3.0.0"
    },
    "problem-decomposer": {
      "role": "builder",
      "responsibility": "Interactive concept decomposition",
      "file": "agents/problem_decomposer_agent.py",
      "version": "3.0.0"
    },
    "problem-scaffolding-generator": {
      "role": "builder",
      "responsibility": "Problem generation with integrated scaffolding",
      "file": "agents/problem_scaffolding_generator_agent.py",
      "version": "3.0.0"
    },
    "personalization-engine": {
      "role": "analyzer",
      "responsibility": "Student personalization via graph clusters",
      "file": "agents/personalization_engine_agent.py",
      "version": "3.0.0"
    },
    "self-improver": {
      "role": "improver",
      "responsibility": "Code improvement with CIA protocol",
      "file": "agents/self_improver_agent.py",
      "version": "3.0.0"
    },
    "meta-planning-analyzer": {
      "role": "analyzer",
      "responsibility": "Meta-cognitive planning analysis",
      "file": "agents/meta_planning_analyzer.py",
      "version": "3.0.0"
    },
    "meta-query-helper": {
      "role": "specialist",
      "responsibility": "Planning trace query coordination",
      "file": "agents/meta_query_helper.py",
      "version": "3.0.0"
    }
  },
  
  "removed_agents": {
    "note": "Following agents removed in v3.0.0 refactoring",
    "tier_coordinators": [
      "semantic-manager-agent (logic merged into meta-orchestrator)",
      "kinetic-execution-agent (logic merged into meta-orchestrator)",
      "dynamic-learning-agent (logic merged into meta-orchestrator)"
    ],
    "community_placeholders": [
      "performance-engineer (minimal implementation, can re-add when needed)",
      "security-auditor (minimal implementation, can re-add when needed)",
      "test-automation-specialist (minimal implementation, can re-add when needed)"
    ],
    "replaced": [
      "example-generator (replaced by problem-scaffolding-generator)",
      "dependency-mapper (replaced by neo4j-query-agent)"
    ]
  },
  
  "architecture_summary": {
    "pattern": "kenneth-liao",
    "main_agents": 1,
    "subagents": 11,
    "total_agent_files": 11,
    "markdown_duplicates": 0,
    "benefits": [
      "50% reduction in agent files (36 â†’ 11)",
      "Eliminated Python/Markdown duplication",
      "Clear main/subagent separation",
      "Simplified maintenance",
      "Aligned with Claude Code 2.0 best practices"
    ]
  },
  
  "ontology_metadata": {
    "based_on": "Kenneth-Liao Claude Agent SDK pattern",
    "reference": "kenneth-liao/claude-agent-sdk-intro/6_subagents.py",
    "refactored_date": "2025-10-16",
    "previous_version": "Palantir 3-tier (v2.2.0)",
    "migration_reason": "Simplify architecture, eliminate duplication, follow SDK best practices"
  }
}

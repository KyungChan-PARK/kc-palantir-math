#!/usr/bin/env python3
"""
PreToolUse Hook - Validation and Observability

Executes before every tool call to:
1. Validate parameters (prevent TypeErrors)
2. Check safety (block dangerous operations)
3. Send observability event

Based on: claude-code-2-0-deduplicated-final.md lines 14038-14643
Pattern: PreToolUse can deny, ask, or allow with modifications

VERSION: 1.0.0
DATE: 2025-10-16
"""

import json
import sys
import re
import subprocess


def validate_sdk_parameters(tool_input: dict) -> tuple[bool, str]:
    """
    Validate SDK parameter usage.
    
    Returns: (valid, reason)
    """
    # Check for invalid AgentDefinition parameters
    invalid_params = {
        'thinking': 'Agent SDK does not support thinking parameter',
        'cache_control': 'Agent SDK does not support cache_control',
        'system': 'Use "prompt" field instead of "system"',
    }
    
    prompt = str(tool_input)
    
    for param, reason in invalid_params.items():
        if param in prompt.lower():
            return False, f"Invalid SDK parameter: {reason}"
    
    return True, ""


def check_dangerous_operations(tool_name: str, tool_input: dict) -> tuple[bool, str]:
    """
    Check for dangerous operations requiring approval.
    
    Returns: (safe, warning_message)
    """
    # Bash command safety
    if tool_name == 'Bash':
        command = tool_input.get('command', '')
        
        dangerous_patterns = [
            (r'rm\s+-rf\s+/', 'Recursive delete from root'),
            (r'git\s+push\s+--force', 'Force push'),
            (r'DROP\s+TABLE', 'SQL table drop'),
            (r'DELETE\s+FROM.*WHERE\s+1=1', 'Bulk SQL delete'),
        ]
        
        for pattern, desc in dangerous_patterns:
            if re.search(pattern, command, re.IGNORECASE):
                return False, f"Dangerous: {desc} - Command: {command}"
    
    # File operation safety
    if tool_name in ['Write', 'Edit']:
        file_path = tool_input.get('file_path', '')
        
        if 'agents/' in file_path and file_path.endswith('.py'):
            return False, f"Agent modification requires approval: {file_path}"
    
    return True, ""


def main():
    """Main hook execution"""
    # Read input from stdin
    try:
        input_data = json.loads(sys.stdin.read())
    except json.JSONDecodeError as e:
        print(f'{{"error": "Invalid JSON: {e}"}}')
        sys.exit(1)
    
    tool_name = input_data.get('tool_name', '')
    tool_input = input_data.get('tool_input', {})
    
    # Send observability event (fire-and-forget)
    subprocess.Popen(
        ['python3', '.claude/hooks/send_event.py'],
        stdin=subprocess.PIPE,
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL
    ).communicate(json.dumps(input_data).encode())
    
    # Validation 1: SDK parameters
    valid, reason = validate_sdk_parameters(tool_input)
    if not valid:
        output = {
            "hookSpecificOutput": {
                "hookEventName": "PreToolUse",
                "permissionDecision": "deny",
                "permissionDecisionReason": f"❌ {reason}"
            }
        }
        print(json.dumps(output))
        sys.exit(0)
    
    # Validation 2: Dangerous operations
    safe, warning = check_dangerous_operations(tool_name, tool_input)
    if not safe:
        output = {
            "hookSpecificOutput": {
                "hookEventName": "PreToolUse",
                "permissionDecision": "ask",
                "permissionDecisionReason": f"⚠️ {warning}\n\nProceed?"
            }
        }
        print(json.dumps(output))
        sys.exit(0)
    
    # All checks passed - allow execution
    print(json.dumps({"hookSpecificOutput": {"hookEventName": "PreToolUse", "permissionDecision": "allow"}}))
    sys.exit(0)


if __name__ == "__main__":
    main()

